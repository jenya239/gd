<?xml version="1.0" ?>
<BaseScreen xmlns:mx="http://www.adobe.com/2006/mxml"
            xmlns="com.turbostool.client.screens.*"
            width="607" height="390"
            horizontalScrollPolicy="off" verticalScrollPolicy="off"
            xmlns:controls="com.turbostool.controls.*"
            xmlns:gas="com.turbostool.client.gas.*"
            creationComplete="onCreationComplete()"
            backgroundColor="#151D12"
            borderColor="#DE8A04"
            borderThickness="2"
            enterState="changeFuelCount()">

    <mx:Script><![CDATA[
        import com.turbostool.client.ModelsStorage;
        import com.turbostool.client.Tracker;
        import com.turbostool.client.city.ScreenSelectedCommand;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.model.GasInfo;
        import com.turbostool.client.model.UserInfo;
        import com.turbostool.client.model.WorkOfferInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.BuyFuelRequest;
        import com.turbostool.client.net.messages.BuyFuelResponse;
        import com.turbostool.client.net.messages.CancelWorkRequest;
        import com.turbostool.client.net.messages.CancelWorkResponse;
        import com.turbostool.client.net.messages.FinishWorkMessage;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.net.messages.StartWorkRequest;
        import com.turbostool.client.net.messages.StartWorkResponse;
        import com.turbostool.client.utils.Utils;

        import mx.controls.Alert;

        private function screenCommand(screenName: String): void {
            dispatchEvent(new ScreenSelectedCommand(screenName));
        }

        private static var instance:Gas;

        public static function getInstance():Gas {
            return instance;
        }

        [Bindable]
        private var fuelCount:Number = 0;


        [Bindable]
        private var workMessage:String = "";

        private var workStartTime:Number = 0;
        private var _totalWorkTime:Number = 0;

        [Bindable]
        private var elapsedWorkTime:Number = 0;

        private var _workTimer:Timer;

        [Bindable]
        override public function get modelsStorage():ModelsStorage
        {
            return _modelsStorage;
        }

        override public function set modelsStorage(val:ModelsStorage):void
        {
            _modelsStorage = val;
        }

        private function onCreationComplete(): void
        {
            instance = this;
            EventManager.instance.addEventListener(BuyFuelResponse.BUY_FUEL, onBuyFuelResponse);
            EventManager.instance.addEventListener(StartWorkResponse.START_WORK, onStartWorkResponse);
            EventManager.instance.addEventListener(FinishWorkMessage.FINISH_WORK, finishWorkHandler);
            EventManager.instance.addEventListener(CancelWorkResponse.CANCEL_WORK, onCancelWorkResponse);
            _workTimer = new Timer(1000, 0);
            _workTimer.addEventListener("timer", workTimerHandler);
        }

        private function workTimerHandler(e:TimerEvent):void {
            elapsedWorkTime = _totalWorkTime - Utils.now() + workStartTime;
        }

        private function startWork(workIndex:int):void {
            var workID:int = (modelsStorage.gas.jobOffers[workIndex] as WorkOfferInfo).id;
            SessionSocket.instance.sendMessage(new StartWorkRequest(workID));

            Tracker.instance.trackEvent("work", "startRequest", "start", workID);
        }

        private function onStartWorkResponse(event:ServerResponseEvent):void {

            var response: StartWorkResponse = event.response as StartWorkResponse;
            if(response.isOK)
            {
                workMessage = response.message;
                _totalWorkTime = response.time;
                gasViewStack.selectedChild = workScreen;
                workStartTime = Utils.now();
                _workTimer.start();
                btnBack.visible = false;

                Tracker.instance.trackEvent("work", "startResponse", "ok");
            } else {
                Alert.show("Ошибка трудоустройства: " + response.message)

                Tracker.instance.trackEvent("work", "startResponse", "error?message=" + response.message);
            }
        }

        private function cancelWork():void {
            SessionSocket.instance.sendMessage(new CancelWorkRequest());

            Tracker.instance.trackEvent("work", "cancelRequest", "cancel");
        }

        private function onCancelWorkResponse(event: ServerResponseEvent):void {
            var response: CancelWorkResponse = event.response as CancelWorkResponse;
            endWork(response.gasInfo, response.userInfo);

            Tracker.instance.trackEvent("work", "cancelResponse", "ok");
        }

        private function finishWorkHandler(event:ServerResponseEvent):void {
            var response: FinishWorkMessage = event.response as FinishWorkMessage;
            endWork(response.gasInfo, response.userInfo);

            Tracker.instance.trackEvent("work", "finish");
        }

        private function endWork(newGasInfo:GasInfo, newUserInfo:UserInfo):void {
            _modelsStorage.gas = newGasInfo;
            _modelsStorage.userInfo = newUserInfo;
            _workTimer.stop();
            gasViewStack.selectedChild = mainScreen;
            btnBack.visible = true;
        }

        private function buyFuel():void {
            SessionSocket.instance.sendMessage(new BuyFuelRequest(fuelCount));

            Tracker.instance.trackEvent("fuel", "buyRequest", "buy", fuelCount);
        }

        private function onBuyFuelResponse(event: ServerResponseEvent):void {
            var response: BuyFuelResponse = event.response as BuyFuelResponse;
            if(response.isOK)
            {
                modelsStorage = modelsStorage;
                modelsStorage.userInfo = response.userInfo;
                modelsStorage.gas = response.gasInfo;
                Gas.getInstance().changeFuelCount();
                Alert.show(str("succesfullBuy"));

                Tracker.instance.trackEvent("fuel", "buyResponse", "ok");
            } else
            {
                Alert.show(str("buyError") + ": " + response.message);
                
                Tracker.instance.trackEvent("fuel", "buyResponse", "error?message=" + response.message);
            }

        }

        public function changeFuelCount():void {
            var locFuelCount:Number = Number(tiFuelCountToBuy.text);
            if (! isNaN(locFuelCount)) {
                fuelCount = locFuelCount;
            }
            //Alert.show("changeFuelCount");
        }

        private function formatWorkTime(time:Number):String {

            var min1: int = Math.floor(time / 60000);
            var hour: int = Math.floor(min1 / 60);
            var min: int = Math.floor(min1 - hour * 60);
            var sec: int = Math.floor((time - min1 * 60000) / 1000);

            var ss: String = (sec < 10) ? '0' + sec : sec.toString();
            var ms: String = (min < 10) ? '0' + min : min.toString();
            var hs: String = (hour < 10) ? '0' + hour : hour.toString();
            if (hour > 0) {
                return hs + '.' + ms;
            } else {
                return ms + '.' + ss;
            }
        }

        ]]></mx:Script>

    <mx:Metadata>
        [Event(name="screenSelected", type="com.turbostool.client.city.ScreenSelectedCommand")]
    </mx:Metadata>
    
    <mx:Button id="btnBack" label="{str('toCity')}" styleName="default" fontFamily="Arial" fontWeight="bold" fontSize="11"
               height="21" icon="@Embed(source='/assets/gui/common/exitIcon.png')" textAlign="left"
               textIndent="5" click="onBackClick()" right="32.5" top="11"/>

    <ScreenHead x="32.5" y="35" text="{str('gasStation2')}"/>

    <mx:ViewStack id="gasViewStack"
                  x="32.5" y="64"
                  width="541" height="313" horizontalScrollPolicy="off" verticalScrollPolicy="off">
        <mx:Canvas id="mainScreen" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
            <mx:Image source="@Embed('/assets/gui/screens/gas/bkg.png')" y="3"/>
            <mx:Label x="7" y="5" text="{str('yourFuel')}" color="#F2FCE3" fontSize="10" fontFamily="Arial" fontWeight="bold"
                      styleName="default"/>
            <mx:Image x="7" y="22" source="@Embed('/assets/gui/screens/gas/gas_icon.png')"/>
            <mx:Label x="43" y="22" text="{Utils.round(modelsStorage.userInfo.carInfo.fuel)}/{modelsStorage.userInfo.carInfo.fuelCapacity}"
                      color="#F2FCE3" fontSize="19" fontFamily="Arial" fontWeight="bold"
                      styleName="default"/>
            <mx:Label x="138" y="5" text="{str('yourAccount')}" color="#F2FCE3" fontSize="10" fontFamily="Arial" fontWeight="bold"
                      styleName="default"/>
            <mx:Image x="138" y="22" source="@Embed('/assets/gui/screens/gas/baks_icon.png')"/>
            <mx:Label x="174" y="22" text="{Utils.round(modelsStorage.userInfo.money)}"
                      color="#F2FCE3" fontSize="19" fontFamily="Arial" fontWeight="bold" styleName="default"/>
            <controls:Rectangle x="0" y="54"
                                width="543" height="2"
                                cornerRadius="6" backgroundColor2="#F2FCE3"/>
            <mx:Label x="7" y="59" text="{str('priceForLitre')}" color="#F2FCE3" fontSize="10" fontFamily="Arial"
                      fontWeight="bold"
                      styleName="default"/>
            <mx:Image x="7" y="79" source="@Embed('/assets/gui/screens/gas/baks_icon.png')"/>
            <mx:Label x="43" y="79" text="{modelsStorage.gas.fuelPrice}" color="#F2FCE3" fontSize="19"
                      fontFamily="Arial" fontWeight="bold"
                      styleName="default"/>
            <mx:TextInput x="138" y="79" text="{Utils.round(modelsStorage.gas.maxFuelCount)}"
                          width="60" height="30" fontSize="17" fontFamily="Arial"
                          fontWeight="bold" styleName="default" id="tiFuelCountToBuy"
                          textInput="changeFuelCount()"
                          enter="changeFuelCount()"
                          dataChange="changeFuelCount()"
                          change="changeFuelCount()"/>
            <mx:Label x="203" y="79" id="lblFuelPrice" color="#F2FCE3"
                      text="X {modelsStorage.gas.fuelPrice} = {Utils.round(fuelCount * modelsStorage.gas.fuelPrice)}"
                      fontSize="19" fontFamily="Arial" fontWeight="bold" styleName="default"/>
            <mx:Button x="433" y="79" click="buyFuel()" label="{str('buy')}" color="#F2FCE3" fontSize="19"
                       fontFamily="Arial" fontWeight="bold" width="90" height="30" styleName="default"/>
            <controls:Rectangle x="0" y="115" width="541" height="2" cornerRadius="6" backgroundColor2="#F2FCE3"/>
            <mx:Label x="7" y="121" text="{str('workOnGasStation')}"
                      color="#F2FCE3" fontSize="10" fontFamily="Arial" fontWeight="bold" styleName="default"/>
            <mx:Button x="12" y="140" height="71" styleName="default" width="250"
                       label="{modelsStorage.gas.message0}" click="startWork(0)"
                       icon="@Embed(source='/assets/gui/screens/gas/clock_10min.png')" fontFamily="Arial"/>

            <mx:Button x="273" y="140" height="71" styleName="default" width="250"
                       label="{modelsStorage.gas.message1}" click="startWork(1)"
                       icon="@Embed(source='/assets/gui/screens/gas/clock_1hour.png')" fontFamily="Arial"/>

            <mx:Button x="12" y="219" height="71" styleName="default" width="250"
                       label="{modelsStorage.gas.message2}" click="startWork(2)"
                       icon="@Embed(source='/assets/gui/screens/gas/clock_1hour.png')" fontFamily="Arial"/>

            <mx:Button x="273" y="219" height="71" styleName="default" width="250"
                       label="{modelsStorage.gas.message3}" click="startWork(3)"
                       icon="@Embed(source='/assets/gui/screens/gas/clock_1hour.png')" fontFamily="Arial"/>
        </mx:Canvas>

        <mx:Canvas id="workScreen" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
            <mx:Image source="@Embed('/assets/gui/screens/gas/work_bkg.png')"/>
            <mx:Label x="7" y="224" text="{workMessage}"
                      color="#DE8A04" fontSize="14" fontFamily="Arial" fontWeight="bold" styleName="default"/>
            <mx:Label x="3" y="241" text="{str('timeLeft')}"
                      color="#F2FCE3" fontSize="12" fontFamily="Arial" fontWeight="bold" styleName="default"/>
            <mx:Label x="1" y="245"
                      height="65"
                      fontSize="52" fontFamily="Arial" fontWeight="bold"
                      text="{formatWorkTime(elapsedWorkTime)}"
                      color="#FFFFFF" styleName="default"/>
            <mx:Button x="150" y="280" click="cancelWork()" label="{str('stop')}" fontSize="19"
                       color="#F2FCE3" fontFamily="Arial" fontWeight="bold" height="30" styleName="default"/>
        </mx:Canvas>
    </mx:ViewStack>

</BaseScreen>