<?xml version="1.0" ?>
<screens:BaseScreen
        xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:screens="com.turbostool.client.screens.*" xmlns:car="com.turbostool.client.screens.car.*"
        xmlns:shop="com.turbostool.client.shop.*" xmlns:garage="com.turbostool.client.garage.*"
        width="607" height="390"
        xmlns:controls="com.turbostool.controls.*" backgroundColor="#151D12"
        currentState="{getStateIfExists(userInfo.tutorialStageStr)}"
        
        >
    <screens:states>
        <mx:State name="tutorialStage3">
            <mx:AddChild position="lastChild">
                <controls:PointingArrowUp currentState="{modelsStorage.userInfo.homeCity == 1 ? '': 'blue'}"
                                          horizontalCenter="-166" verticalCenter="-35" id="pointingarrowup1"/>
            </mx:AddChild>
            <mx:AddChild position="lastChild">
                <controls:BackgroundedLabel borderColor2="0xFFFFFF"
                                            backgroundColor2="{modelsStorage.userInfo.homeCity == 1 ? 0xb52319: 0x198bb5}"
                                            borderWidth="1" backgroundAlpha2="1.0" horizontalCenter="-162"
                                            verticalCenter="9" id="backgroundedlabel1" labelText="{str('tutorialStage3_Message2')}">

                </controls:BackgroundedLabel>
            </mx:AddChild>
        </mx:State>
        <mx:State name="tutorialStage4">
            <mx:AddChild position="lastChild">
                <controls:PointingArrowUp currentState="{modelsStorage.userInfo.homeCity == 1 ? '': 'blue'}"
                                          horizontalCenter="236" id="pointingarrowup0" top="40"/>
            </mx:AddChild>
        </mx:State>
    </screens:states>

    <mx:Style source="/styles.css"/>
    <controls:Rectangle x="29" y="36" height="350" width="271" alpha="1" borderColor2="#dc8d0c" backgroundAlpha="1"
                        cornerRadius="6" backgroundColor2="#07072b" borderWidth="1"/>
    <controls:Rectangle x="306" y="36" height="350" width="271" alpha="1" borderColor2="#dc8d0c"
                        cornerRadius="6" backgroundColor2="#07072b" borderWidth="1"/>
    <controls:Rectangle x="30" y="36" width="270" height="32" cornerRadius="6" backgroundColor2="#DE8A04"/>
    <controls:Rectangle x="307" y="36" width="270" height="32" cornerRadius="6" backgroundColor2="#DE8A04"/>
    <mx:Image x="33" y="37" source="@Embed('/assets/gui/common/dots.png')"/>

    <mx:Label x="114" y="69" text="{str('items')}" color="#EFEFEF" fontSize="11" fontWeight="normal" height="16"
              fontFamily="Days" alpha="0.6"/>
    <mx:Label x="309" y="315" text="{str('installed')}" color="#EFEFEF" fontSize="11" fontWeight="normal" height="16"
              fontFamily="Days" alpha="0.6"/>
    <mx:Label x="27" y="38" text="{str('shop')}" color="#F2FCE3" fontSize="18" fontFamily="Days" fontWeight="normal"
              styleName="default"/>
    <mx:Label x="436" y="38" text="{str('inventory')}" color="#F2FCE3" fontSize="18" fontFamily="Days" fontWeight="normal"/>
    <mx:Button label="{str('toCity')}" styleName="default" fontFamily="Arial"
               icon="@Embed(source='../../../../assets/gui/common/exitIcon.png')"
               click="onBackClick()" horizontalCenter="237" top="11" height="21"/>

    <mx:Image x="145" y="37" source="@Embed('/assets/gui/screens/shop/header_bkg.png')"/>
    <mx:Image x="307" y="37" source="@Embed('/assets/gui/screens/shop/header2_bkg.png')"/>

    <mx:Binding source="modelsStorage.userInfo" destination="userInfo"/>
    <mx:Binding source="modelsStorage.shop" destination="shopItems"/>
    <mx:Metadata>
        [Event(name="screenSelected", type="com.turbostool.client.city.ScreenSelectedCommand")]
    </mx:Metadata>

    <mx:Script><![CDATA[
        import com.turbostool.client.ModelsStorage;
        import com.turbostool.client.Tracker;
        import com.turbostool.client.city.ScreenSelectedCommand;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.model.CarInfo;
        import com.turbostool.client.model.ItemInfo;
        import com.turbostool.client.model.UserInfo;
        import com.turbostool.client.model.VkontakteInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.BuyItemRequest;
        import com.turbostool.client.net.messages.BuyItemResponse;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesRequest;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesResponse;
        import com.turbostool.client.net.messages.GetPropertyRequest;
        import com.turbostool.client.net.messages.GetPropertyResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.utils.Utils;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.ListEvent;

        private var _deltaVotes: Number = 0;
        private var _goldChange: Number = 0;

        public function onScreenEnter(): void {
            selectedUpgrade = null;
            _currentFilter = "engine";
        }

        private function onBuyItem(): void {
            _goldChange = 0;

            if (_selectedUpgrade != null) {
                if (_selectedUpgrade.realPrice > 0) {
                    if (userInfo.realMoney >= _selectedUpgrade.realPrice) {
                        EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                        SessionSocket.instance.sendMessage(new BuyItemRequest(_selectedUpgrade.classID));
                        Tracker.instance.trackEvent("buyRealItem", "request", _selectedUpgrade.name);
                    } else {
                        if (!Client.instance.isAPIWrapper) {
                            Alert.show(str("notEnoughGoldGoToBank"));
                            return;
                        } else {
                            EventManager.instance.addEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
                            SessionSocket.instance.sendMessage(new GetPropertyRequest(GetPropertyRequest.VKONTAKTE_INFO));
                        }
                    }
                } else {
                    EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                    SessionSocket.instance.sendMessage(new BuyItemRequest(_selectedUpgrade.classID));
                    Tracker.instance.trackEvent("buyVirtualItem", "request", _selectedUpgrade.name);
                }

                showLoadingIndicator();
            }
        }

        private function onBuyItemResponse(event: ServerResponseEvent):void
        {
            EventManager.instance.removeEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
            var response: BuyItemResponse = event.response as BuyItemResponse;
            hideLoadingIndicator();

            if (response.isOK) {
                _modelsStorage.userInfo = response.userInfo;
                if (modelsStorage.userInfo.tutorialStage <= 3) {
                    Utils.nextTutorialStage();
                }

                var message: String = str("succesfullBuy");
                if (_goldChange > 0)
                    message += "\n " + str("cashLeftOnYourBalance", [_goldChange + " " + str("gold")]);

                _installedUpgrade = _selectedUpgrade;

                Alert.show(message);

                Tracker.instance.trackTrans(response.itemClass.name, response.itemClass.slot, response.itemClass.price, response.itemClass.realPrice);

                if (response.itemClass.realPrice > 0)
                    Tracker.instance.trackEvent("buyRealItem", "successful", response.itemClass.name);
                else
                    Tracker.instance.trackEvent("buyVirtualItem", "successful", response.itemClass.name);
            } else {
                Alert.show(str("buyError") + ": " + response.message);

                Tracker.instance.trackEvent("buyItem", "failure", response.message);
            }

        }

        private function onVkontakteInfo(event: ServerResponseEvent): void {
            EventManager.instance.removeEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
            hideLoadingIndicator();

            var response: GetPropertyResponse = event.response as GetPropertyResponse;
            if (response.isOK) {
                modelsStorage.vkontakteInfo = response.property as VkontakteInfo;
                var deltaGold: Number = Utils.roundToGreater(_selectedUpgrade.realPrice - modelsStorage.userInfo.realMoney);
                _deltaVotes = Utils.roundToGreater(deltaGold / modelsStorage.globalInfo.vkontakteExchangeRate);
                _goldChange = _deltaVotes * modelsStorage.globalInfo.vkontakteExchangeRate - deltaGold;
                if (modelsStorage.vkontakteInfo.userAppBalance >= _deltaVotes) {
                    sendWithdrawRequest();
                } else {
                    Client.instance.wrapper.addEventListener("onBalanceChanged", onBalanceChanged);
                    Client.instance.wrapper.external.showPaymentBox(_deltaVotes);
                }
            } else {
                Alert.show(str("error") + ": " + response.message);
            }
        }

        private function onBalanceChanged(e: Object):void {
            Client.instance.wrapper.removeEventListener("onBalanceChanged", onBalanceChanged);
            sendWithdrawRequest();
        }

        private function sendWithdrawRequest(): void {
            EventManager.instance.addEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);
            SessionSocket.instance.sendMessage(new ExchangeVkontakteVotesRequest(_deltaVotes));
            showLoadingIndicator();
        }

        private function onExchangeResponse(event: ServerResponseEvent): void {
            hideLoadingIndicator();
            EventManager.instance.removeEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);

            var response: ExchangeVkontakteVotesResponse = event.response as ExchangeVkontakteVotesResponse;

            if (response.isOK) {
                Tracker.instance.trackEvent("exchangeVotes", "successful", "" + response.votes, response.votes);

                EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                SessionSocket.instance.sendMessage(new BuyItemRequest(_selectedUpgrade.classID));
                Tracker.instance.trackEvent("buyRealItem", "request", _selectedUpgrade.name);
            } else {
                Alert.show(str("exchangeError") + ": " + response.message);

                Tracker.instance.trackEvent("exchangeVotes", "failure", response.message);
            }
        }

        private function screenCommand(screenName: String): void {
            dispatchEvent(new ScreenSelectedCommand(screenName));
        }

        private function onFilterButton(event: MouseEvent): void
        {
            _currentFilter = event.target.data;
            _shopCollection.refresh();
        }

        private var _userInfo: UserInfo;

        [Bindable]
        private var _carInfo: CarInfo;

        private var _shopItems: Array;
        private var _shopCollection: ArrayCollection;
        private var _nitroColletion:ArrayCollection;

        [Bindable]
        private var _currentFilter: String = "engine";

        [Bindable]
        private var _selectedUpgrade: ItemInfo;

        [Bindable]
        private var _installedUpgrade: ItemInfo;

        private function updateEquipment(): void {
            wheelSlot.data = null;
            engineSlot.data = null;
            turboSlot.data = null;
            hullSlot.data = null;
            tailPipeSlot.data = null;
            brakesSlot.data = null;

            if (userInfo != null) {
                for each(var eqv: ItemInfo in userInfo.equipment) {
                    (this[eqv.slot + "Slot"] as ShopItemRenderer).data = eqv;
                }
            }
        }

        private function onUserItemClick(event:ListEvent):void
        {
            var itemInfo: ItemInfo = event.currentTarget.selectedItem;
            if (itemInfo != null)
            {
                var sip: ShopItemPopup = new ShopItemPopup();
                sip.itemInfo = itemInfo;
                sip.modelsStorage = modelsStorage;
                sip.isBuying = false;
                ModalManager.instance.addModalWindow(sip, "modalClose");

            }
        }

        private function onShopItemClick(event: ListEvent):void
        {
            selectedUpgrade = event.currentTarget.selectedItem;
        }

        private function set selectedUpgrade(value:ItemInfo):void {
            _selectedUpgrade = value;
            _installedUpgrade = null;

            if (_selectedUpgrade != null) {
                for each(var e: ItemInfo in userInfo.equipment) {
                    if (e.slot == _selectedUpgrade.slot) {
                        _installedUpgrade = e;
                        break;
                    }
                }
            }
        }

        [Bindable]
        public function get userInfo():UserInfo
        {
            return _userInfo;
        }

        public function set userInfo(val:UserInfo):void
        {
            _userInfo = val;

            if (_modelsStorage != null && _modelsStorage.cars != null) {
                _carInfo = _modelsStorage.cars[_userInfo.currentCarID];

                updateEquipment();
            }
        }

        [Bindable]
        override public function get modelsStorage():ModelsStorage
        {
            return _modelsStorage;
        }

        override public function set modelsStorage(val:ModelsStorage):void
        {
            _modelsStorage = val;

            if (_userInfo != null)
            {
                _carInfo = _modelsStorage.cars[_userInfo.currentCarID];

                updateEquipment();
            }
        }

        private function shopFilterFunction(item: ItemInfo):Boolean
        {
            return (_currentFilter == "" || item.slot == _currentFilter);
        }

        private function nitroFilterFunction(item: ItemInfo):Boolean
        {
            return item.isNitro;
        }


        [Bindable]
        public function get shopItems(): Array
        {
            return _shopItems;
        }

        public function set shopItems(value:Array):void
        {
            _shopItems = value;
            shopCollection = new ArrayCollection(value.sort(itemCompare));
            nitroColletion = new ArrayCollection(value);
        }

        [Bindable]
        public function get shopCollection():ArrayCollection
        {
            return _shopCollection;
        }

        public function set shopCollection(value:ArrayCollection):void
        {
            value.filterFunction = shopFilterFunction;
            value.refresh();
            _shopCollection = value;

            Tracker.instance.trackPageview('/city/shop/' + _currentFilter);
        }

        [Bindable]
        public function get nitroColletion():ArrayCollection
        {
            return _nitroColletion;
        }

        public function set nitroColletion(value:ArrayCollection):void
        {
            value.filterFunction = nitroFilterFunction;
            value.refresh();
            _nitroColletion = value;
        }

        private function itemCompare(item1:ItemInfo, item2:ItemInfo):int
        {
            if (item1.realPrice > 0 && item2.realPrice == 0) return 1;
            if (item1.realPrice == 0 && item2.realPrice > 0) return -1;
            if (item1.price > item2.price) return 1;
            if (item1.price < item2.price) return -1;
            if (item1.paramSum() > item2.paramSum()) return 1;
            if (item1.paramSum() < item2.paramSum()) return -1;
            return 0;
        }

        ]]></mx:Script>

	<mx:Image x="309" y="70" source="@Embed('/assets/gui/screens/shop/shop_car_bkg.jpg')"/>
	
    <mx:Button y="109" label="{str('motor')}" data="engine" click="onFilterButton(event)" styleName="engine" fontSize="11"
               paddingLeft="-3" height="35" width="80" x="32" fontFamily="Days" fontWeight="normal" selected="{_currentFilter == 'engine'}" />
    <mx:Button y="185" label="{str('brakes')}" data="brakes" click="onFilterButton(event)" styleName="brakes" fontSize="11"
               paddingLeft="-3" height="35" width="80" x="32" fontFamily="Days" fontWeight="normal" selected="{_currentFilter == 'brakes'}" />
    <mx:Button y="147" label="{str('wheels')}" data="wheel" click="onFilterButton(event)" styleName="wheels" fontSize="11"
               paddingLeft="-3" height="35" width="80" x="32" fontFamily="Days" fontWeight="normal" selected="{_currentFilter == 'wheel'}" />
    <mx:Button y="223" label="{str('hull')}" data="hull" click="onFilterButton(event)" styleName="hull" fontSize="11"
               paddingLeft="-3" height="35" width="80"
               fontFamily="Days" fontWeight="normal" x="32" selected="{_currentFilter == 'hull'}" />
    <mx:Button y="299" label="{str('turbo')}" data="turbo" click="onFilterButton(event)" styleName="turbo" fontSize="11"
               paddingLeft="-3" height="35"
               width="80" x="32" fontFamily="Days" fontWeight="normal" selected="{_currentFilter == 'turbo'}" />
    <mx:Button y="71" label="{str('nitro')}" data="nitro" click="onFilterButton(event)" styleName="nitro" fontSize="11"
               paddingLeft="-3" height="35"
               width="80" fontFamily="Days" fontWeight="normal" x="32" selected="{_currentFilter == 'nitro'}" />
    <mx:Button y="340" label="{str('buy')}" fontSize="28"
               paddingLeft="-3" height="42"
               width="265" fontFamily="Days" fontWeight="normal" x="32" textAlign="center" color="#FFFFFF"
               styleName="redBlack" click="onBuyItem()"/>
    <mx:Button y="261" label="{str('tailpipe')}" data="tailPipe" click="onFilterButton(event)" styleName="tailPipe" fontSize="12"
               paddingLeft="-3" height="35" width="80"
               x="32" fontFamily="Days" fontWeight="normal" selected="{_currentFilter == 'tailPipe'}" />

    <controls:TileListControl itemClick="onShopItemClick(event)" dataProvider="{shopCollection}" x="115" y="89"
                              width="184" height="245" borderThickness="0" cornerRadius="0" columnWidth="45"
                              rowHeight="45"
                              itemRenderer="com.turbostool.client.shop.ShopItemRenderer" backgroundColor="#07072b"/>

    <mx:HRule x="309" y="333" width="266" height="1"/>
    <mx:HRule x="309" y="198" width="266" height="1"/>
    <mx:HRule x="309" y="141" width="266" height="1"/>

    <controls:SmartImage x="341" y="204" width="200" height="110" source="{userInfo.imageURL}" flip="true"/>

    <car:CarParamsEx x="312" y="71" width="255" carInfo="{userInfo.carInfo}" newUpgradeInfo="{_selectedUpgrade}"
                     currentUpgradeInfo="{_installedUpgrade}"/>

    <shop:ShopItemRenderer x="310" y="338" id="engineSlot" selected="{_currentFilter == 'engine'}" />
    <shop:ShopItemRenderer x="354" y="338" id="wheelSlot" selected="{_currentFilter == 'wheel'}" />
    <shop:ShopItemRenderer x="398" y="338" id="brakesSlot" selected="{_currentFilter == 'brakes'}" />
    <shop:ShopItemRenderer x="442" y="338" id="hullSlot" selected="{_currentFilter == 'hull'}" />
    <shop:ShopItemRenderer x="486" y="338" id="tailPipeSlot" selected="{_currentFilter == 'tailPipe'}" />
    <shop:ShopItemRenderer x="530" y="338" id="turboSlot" selected="{_currentFilter == 'turbo'}" />
    
    <shop:ShopItemRenderer x="310" y="148" visible="{_selectedUpgrade != null}" data="{_selectedUpgrade}" />
    <controls:Rectangle visible="{_selectedUpgrade != null}" x="355" y="145" width="218" height="49" backgroundAlpha="0" borderWidth="1" borderColor2="#ffffff" cornerRadius="6" />
    <mx:Label x="356" y="144" visible="{_selectedUpgrade != null}" text="{_selectedUpgrade.name.toLocaleUpperCase()}" color="#E48900" fontFamily="Days" fontSize="11"/>
    <mx:Label x="356" y="159" visible="{_selectedUpgrade != null}" text="ПРОЧНОСТЬ: {_selectedUpgrade.durabilityMax}/{_selectedUpgrade.durabilityMax}" fontFamily="Arial" color="#FFFFFF"/>
    <controls:Rectangle x="356" visible="{_selectedUpgrade != null}" y="173" width="216" height="20" backgroundColor2="#2d3b62" backgroundAlpha="0.7" cornerRadius="3"/>
    <mx:HRule x="356" y="159" width="217" height="1" visible="{_selectedUpgrade != null}" />
    <mx:HRule x="356" y="172" width="217" height="1" visible="{_selectedUpgrade != null}" />
    <mx:Image x="357" y="173" visible="{_selectedUpgrade != null &amp;&amp; !(_selectedUpgrade.realPrice > 0)}" source="@Embed('/assets/gui/screens/gameplay/moneyGreen.png')"/>
    <mx:Image x="362" y="174" visible="{_selectedUpgrade != null &amp;&amp; _selectedUpgrade.realPrice > 0}" source="@Embed('/assets/gui/screens/gameplay/moneyGold.png')"/>
    <mx:Label x="384" y="169" visible="{_selectedUpgrade != null}" text="{_selectedUpgrade.realPrice > 0 ? _selectedUpgrade.realPrice : _selectedUpgrade.price}" fontFamily="Days" fontWeight="normal" fontSize="18" width="188" color="{_selectedUpgrade.realPrice > 0 ? 0xD7A50E : 0x719B2F}" />
    


</screens:BaseScreen>