<?xml version="1.0" ?>
<screens:BaseScreen
        xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:screens="com.turbostool.client.screens.*"
        xmlns:garage="com.turbostool.client.garage.*"
        backgroundColor="#a23636"
        width="326"
        creationComplete="onCreationComplete()">

    <mx:Script><![CDATA[
        import com.turbostool.client.ModelsStorage;
        import com.turbostool.client.Tracker;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.model.CarInfo;
        import com.turbostool.client.model.ItemInfo;
        import com.turbostool.client.model.VkontakteInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.BuyItemRequest;
        import com.turbostool.client.net.messages.BuyItemResponse;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesRequest;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesResponse;
        import com.turbostool.client.net.messages.GetPropertyRequest;
        import com.turbostool.client.net.messages.GetPropertyResponse;
        import com.turbostool.client.net.messages.SellItemRequest;
        import com.turbostool.client.net.messages.SellItemResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.utils.Utils;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        public static function calcSellPrice(itemInfo: ItemInfo, modelsStorage: ModelsStorage, isBuying: Boolean, digits: int = 0): String
        {
            if (itemInfo != null)
            {
                if (isBuying)
                    return itemInfo.realPrice > 0 ? Utils.formatPrice(itemInfo.realPrice, true, digits) : Utils.formatPrice(itemInfo.price, false, digits);
                else
                {
                    return Utils.formatPrice(itemInfo.sellPrice, false, digits);
                }
            }
            else
                return Utils.formatPrice(0, false);
        }

        public static function calcCarSellPrice(carInfo: CarInfo, modelsStorage: ModelsStorage, isBuying: Boolean, digits: int = 0): String
        {
            if(carInfo != null)
            {
                if(isBuying)
                    return carInfo.realPrice > 0 ? Utils.formatPrice(carInfo.realPrice, true, digits) : Utils.formatPrice(carInfo.price, false, digits);
                else
                {
                    return Utils.formatPrice(carInfo.sellPrice, false, digits);
                }
            }
            else
                return Utils.formatPrice(0, false);
        }

        private function onBuyItemResponse(event: ServerResponseEvent):void
        {
            EventManager.instance.removeEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
            var response: BuyItemResponse = event.response as BuyItemResponse;
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            if (response.isOK)
            {
                _modelsStorage.userInfo = response.userInfo;
                if (modelsStorage.userInfo.tutorialStage <= 3)
                {
                    Utils.nextTutorialStage();
                }
                var message: String = str("succesfullBuy");
                if (_goldChange > 0)
                    message += "\n " + str("cashLeftOnYourBalance", [_goldChange + " " + str("gold")]);

                Alert.show(message);

                Tracker.instance.trackTrans(response.itemClass.name, response.itemClass.slot, response.itemClass.price, response.itemClass.realPrice);

                if (response.itemClass.realPrice > 0)
                    Tracker.instance.trackEvent("buyRealItem", "successful", response.itemClass.name);
                else
                    Tracker.instance.trackEvent("buyVirtualItem", "successful", response.itemClass.name);
            }
            else
            {
                Alert.show(str("buyError") + ": " + response.message);

                Tracker.instance.trackEvent("buyItem", "failure", response.message);
            }
        }

        private function onSellItemResponse(event: ServerResponseEvent):void
        {
            EventManager.instance.removeEventListener(SellItemResponse.SELL_ITEM, onSellItemResponse);
            var response: SellItemResponse = event.response as SellItemResponse;
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            if (response.isOK)
            {
                _modelsStorage.userInfo = response.userInfo;
                Alert.show(str("succesfullSell"));
                Tracker.instance.trackEvent("sellItem", "successful", response.itemClass.name);
            }
            else
            {
                Alert.show(str("sellError") + ": " + response.message);
                Tracker.instance.trackEvent("sellItem", "failure", response.message);
            }

        }

        [Bindable]
        public var isBuying: Boolean;

        private function onBuySell(): void
        {
            _goldChange = 0;
            if (isBuying)
            {
                if (itemInfo.realPrice > 0)
                {
                    if (modelsStorage.userInfo.realMoney >= itemInfo.realPrice)
                    {
                        EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                        SessionSocket.instance.sendMessage(new BuyItemRequest(itemInfo.classID));
                        Tracker.instance.trackEvent("buyRealItem", "request", itemInfo.name);
                    }
                    else
                    {
                        if (!Client.instance.isAPIWrapper)
                        {
                            Alert.show(str("notEnoughGoldGoToBank"));
                            return;
                        }
                        else
                        {
                            EventManager.instance.addEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
                            SessionSocket.instance.sendMessage(new GetPropertyRequest(GetPropertyRequest.VKONTAKTE_INFO));
                        }
                    }
                }
                else
                {
                    EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                    SessionSocket.instance.sendMessage(new BuyItemRequest(itemInfo.classID));
                    Tracker.instance.trackEvent("buyVirtualItem", "request", itemInfo.name);
                }
            }
            else
            {
                EventManager.instance.addEventListener(SellItemResponse.SELL_ITEM, onSellItemResponse);
                SessionSocket.instance.sendMessage(new SellItemRequest(itemInfo.id));

                Tracker.instance.trackEvent("sellItem", "request", itemInfo.name);
            }

            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);
        }

        private function onBalanceChanged(e: Object):void
        {
            Client.instance.wrapper.removeEventListener("onBalanceChanged", onBalanceChanged);
            sendWithdrawRequest();
        }

        private function sendWithdrawRequest():void
        {
            EventManager.instance.addEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);
            SessionSocket.instance.sendMessage(new ExchangeVkontakteVotesRequest(_deltaVotes));
            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);
        }

        private function onExchangeResponse(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);
            PopUpManager.removePopUp(loadingIndicator);
            var response: ExchangeVkontakteVotesResponse = event.response as ExchangeVkontakteVotesResponse;
            ModalManager.instance.closeAllWindows();
            if (response.isOK)
            {
                //modelsStorage.userInfo = response.userInfo;
                //Alert.show("Голоса успешно переведены!");

                Tracker.instance.trackEvent("exchangeVotes", "successful", "" + response.votes, response.votes);

                EventManager.instance.addEventListener(BuyItemResponse.BUY_ITEM, onBuyItemResponse);
                SessionSocket.instance.sendMessage(new BuyItemRequest(itemInfo.classID));
                Tracker.instance.trackEvent("buyRealItem", "request", itemInfo.name);
            }
            else
            {
                Alert.show(str("exchangeError") + ": " + response.message);

                Tracker.instance.trackEvent("exchangeVotes", "failure", response.message);
            }
        }

        private var _deltaVotes: Number = 0;
        private var _goldChange: Number = 0;

        private function onVkontakteInfo(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();
            var response: GetPropertyResponse = event.response as GetPropertyResponse;
            if (response.isOK)
            {
                modelsStorage.vkontakteInfo = response.property as VkontakteInfo;
                var deltaGold: Number = Utils.roundToGreater(itemInfo.realPrice - modelsStorage.userInfo.realMoney);
                _deltaVotes = Utils.roundToGreater(deltaGold/modelsStorage.globalInfo.vkontakteExchangeRate);
                _goldChange = _deltaVotes*modelsStorage.globalInfo.vkontakteExchangeRate-deltaGold;
                if (modelsStorage.vkontakteInfo.userAppBalance >= _deltaVotes)
                {
                    sendWithdrawRequest();
                } else
                {
                    Client.instance.wrapper.addEventListener("onBalanceChanged", onBalanceChanged);
                    Client.instance.wrapper.external.showPaymentBox(_deltaVotes);
                }
            }
            else
            {
                Alert.show(str("error") + ": " + response.message);
            }
        }

        private var _itemInfo: ItemInfo;

        private function onCreationComplete(): void
        {
            setDurability();
        }

        [Bindable]
        public function get itemInfo():ItemInfo
        {
            return _itemInfo;
        }

        public function set itemInfo(val:ItemInfo):void
        {
            _itemInfo = val;
            setDurability();

        }

        protected function setDurability(): void
        {
            if (durability != null && _itemInfo != null)
                durability.setProgress(_itemInfo.currentDurability, _itemInfo.durabilityMax);
        }

        private function get showDurability():Boolean
        {
            return !itemInfo.isNitro;
        }

        ]]></mx:Script>

    <mx:Text x="4" y="2" htmlText="{str('price')}: {calcSellPrice(itemInfo, modelsStorage, isBuying)}" color="{itemInfo.realPrice > 0 ? 0xD7A50E : 0x719B2F}"
             fontSize="12" fontFamily="Arial"
             fontStyle="normal" fontWeight="bold"/>
    <mx:Button id="close1" y="3" label="x" styleName="gray"
               click="dispatchEvent(new Event('modalClose'))" right="5" height="19" textAlign="center" width="21"/>
    <mx:HRule y="23" left="5" right="5" strokeWidth="1"/>
    <mx:VBox paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" left="0" right="0" top="30">
        <garage:ItemDescriptionControl y="25" left="5" right="5" itemInfo="{itemInfo}" width="100%"/>

        <mx:Canvas width="100%" visible="{showDurability}">
            <mx:ProgressBar id="durability" height="11" y="4" trackHeight="11" left="3" right="52"
                            label=" " minimum="0" maximum="100"
                            mode="manual" trackColors="[#0, #0]" borderColor="#DC8D14" barColor="#eeeeee"
                            indeterminate="false" visible="{showDurability}"/>
            <mx:Label text="{Utils.round(itemInfo.currentDurability)}/{Utils.round(itemInfo.durabilityMax)}"
                      visible="{showDurability}" color="#FFFFFF"
                      fontSize="12" left="265" fontFamily="Arial" fontWeight="bold"/>
        </mx:Canvas>

        <mx:Button x="4" bottom="10" label="{isBuying ? str('buy'): str('sell')}" textAlign="center" styleName="default"
                   fontSize="12"
                   width="100"
                   click="onBuySell()" fontFamily="Verdana"/>
    </mx:VBox>

</screens:BaseScreen>