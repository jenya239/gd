<?xml version="1.0" ?>
<BaseScreen xmlns:mx="http://www.adobe.com/2006/mxml"
            xmlns="com.turbostool.client.screens.*"
            xmlns:registration="com.turbostool.client.registration.*"
            verticalScrollPolicy="off"
            horizontalScrollPolicy="off"
        >

    <mx:Metadata>
        [Event(name="prevScreen", type="com.turbostool.client.registration.PrevScreenCommand")]
    </mx:Metadata>

    <mx:ViewStack id="screens" width="100%" height="100%" selectedIndex="0">
        <registration:CarSelectionScreen id="car" nextScreen="onNextScreen(event)"
                                         registrationController="{registrationController}"/>
        <registration:CitySelectionScreen id="city" nextScreen="onNextScreen(event)"
                                          registrationController="{registrationController}"/>
    </mx:ViewStack>

    <mx:Script><![CDATA[
        import com.turbostool.client.Tracker;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.net.messages.ReasonedResponse;
        import com.turbostool.client.net.messages.RegisterResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.controls.LoadingIndicator;

        import mx.controls.Alert;
        import mx.events.FlexEvent;

        [Bindable]
        public var registrationController: RegistrationController;

        override public function onInitialize(event: FlexEvent):void
        {
            super.onInitialize(event);
            registrationController.addEventListener(RegisterResponse.REGISTER, onRegister);
        }

        private function onNextScreen(event: NextScreenCommand): void
        {
            if (event.screen == car)
            {
                screens.selectedChild = city;
                Tracker.instance.trackPageview("/registration/city");
            }
            else
                if (event.screen == city)
                {
                    if (Client.instance.isAppUser == "1")
                    {
                        startRegistration();
                    }
                    else
                    {
                        EventManager.instance.addEventListener("onApplicationAdded", onApplicationAdded);
                        Client.instance.wrapper.external.showInstallBox();
                    }
                }
        }

        private function onApplicationAdded(e: Object): void
        {
            trace("onApplicationAdded");
            startRegistration();
        }

        private function startRegistration(): void
        {
            EventManager.instance.removeEventListener("onApplicationAdded", onApplicationAdded);
            registrationController.register();
            ModalManager.instance.addModalWindow(new LoadingIndicator(), "");
            Tracker.instance.trackPageview("/registration/waiting");
        }

        private function onRegister(event: ServerResponseEvent): void
        {
            var registerResponse: RegisterResponse = RegisterResponse(event.response);
            ModalManager.instance.closeAllWindows();
            if (registerResponse.result != ReasonedResponse.RESULT_OK)
            {
                screens.selectedChild = car;
                Tracker.instance.trackPageview("/registration/error?message=" + registerResponse.message);
                Alert.show(registerResponse.message);
            }
            else
            {
                Tracker.instance.trackPageview("/registration/complete");
                Tracker.instance.trackEvent("registration", "complete", "" + registrationController.city);
            }
        }


        ]]></mx:Script>

</BaseScreen>