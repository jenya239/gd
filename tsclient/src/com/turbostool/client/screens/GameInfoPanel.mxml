<?xml version="1.0"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="607" height="75"
				verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<!--<mx:LinkButton label="альтернативный чат goroddorog.russchat.com" color="0x248fb5" textDecoration="underline"
									click="navigateToURL(new URLRequest('http://goroddorog.russchat.com/'));" x="190" y="7" height="21" />-->
	<mx:LinkButton label="правила Города Дорог" color="0xffffff" textDecoration="underline" rollOverColor="0x999999"
									click="navigateToURL(new URLRequest('http://188.93.17.91/rules.jpg'));" x="30" y="7" height="21" />
	<mx:Button label="{Client.instance.str('friends')}" click="onFriendsClick()" styleName="noIcon" x="486" y="7"
						 width="100"
						 height="21"/>
	<mx:Text x="133" y="28" color="white" selectable="true" text="Добавляйтесь в группу,"/>
	<mx:Text x="98" y="43" color="white" selectable="true" text="подписывайтесь на обновления"/>
	<mx:Image source="@Embed(source='/assets/gui/common/arrow.png')" y="39" horizontalCenter="0"/>

	<mx:Script><![CDATA[
		import com.turbostool.client.ModelsStorage;
		import com.turbostool.client.Tracker;
		import com.turbostool.client.controllers.VkontakteRequest;
		import com.turbostool.client.event.EventManager;
		import com.turbostool.client.event.VkontakteEvent;

		import com.turbostool.client.friends.FriendsList;
		import com.turbostool.client.friends.VKontaktePermissions;
		import com.turbostool.client.model.FriendInfo;
		import com.turbostool.client.net.SessionSocket;
		import com.turbostool.client.net.messages.GetFriendInfosRequest;
		import com.turbostool.client.net.messages.GetPropertyResponse;
		import com.turbostool.client.net.messages.ServerResponseEvent;
		import com.turbostool.controls.LoadingIndicator;

		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.managers.PopUpManager;

		private var _loadingIndicator:LoadingIndicator = new LoadingIndicator();

		private function onFriendsClick():void
			{
				var vkRequest:VkontakteRequest = new VkontakteRequest();
				vkRequest.addEventListener(VkontakteEvent.RESPONSE, onGetAllFriends);
				vkRequest.addEventListener(VkontakteEvent.ERROR, onGetAllFriendsError);
				vkRequest.sendGetAppFriends();
				var idList:String = "";
				var friendsDict:Dictionary;

				PopUpManager.addPopUp(_loadingIndicator, this, true);
				PopUpManager.centerPopUp(_loadingIndicator);
				PopUpManager.bringToFront(_loadingIndicator);

				function removeLoadingIndicator():void
				{
					PopUpManager.removePopUp(_loadingIndicator);
				}

				function onGetAllFriends(e:VkontakteEvent):void
				{
					vkRequest.removeEventListener(VkontakteEvent.RESPONSE, onGetAllFriends);
					vkRequest.removeEventListener(VkontakteEvent.ERROR, onGetAllFriendsError);
					idList = Client.instance.flashParameters["viewer_id"];
					for each(var id:String in e.xml.uid)
					{
						if (idList != "") idList += ",";
						idList += id.toString();
					}
					vkRequest.addEventListener(VkontakteEvent.RESPONSE, onGetProfiles);
					vkRequest.addEventListener(VkontakteEvent.ERROR, onGetProfilesError);
					vkRequest.sendGetProfiles(idList);
				}

				function onGetAllFriendsError(e:VkontakteEvent):void
				{
					vkRequest.removeEventListener(VkontakteEvent.RESPONSE, onGetAllFriends);
					vkRequest.removeEventListener(VkontakteEvent.ERROR, onGetAllFriendsError);
					removeLoadingIndicator();
					if (e.xml.error_code == 7)
					{
						Tracker.instance.trackPageview("/friends/permissions");
						if (Client.instance.isAPIWrapper)
						{
							Client.instance.wrapper.external.showSettingsBox(1 + 2 + 256 + 512);
						}
						else
						{
							var vk:VKontaktePermissions = new VKontaktePermissions();
							vk.x = 130;
							PopUpManager.addPopUp(vk, Client.instance, true);
						}
					}
				}

				function onGetProfiles(e:VkontakteEvent):void
				{
					vkRequest.removeEventListener(VkontakteEvent.RESPONSE, onGetProfiles);
					vkRequest.removeEventListener(VkontakteEvent.ERROR, onGetProfilesError);
					var friends:ArrayCollection = new ArrayCollection();
					friendsDict = new Dictionary();
					for each(var user:XML in e.xml.user)
					{
						var friendInfo:FriendInfo = FriendInfo.create(user.uid, user.first_name.toString() + " " + user.last_name.toString(), user.photo_medium.toString());
						friends.addItem(friendInfo);
						friendsDict[friendInfo.vkontakteID] = friendInfo;
					}
					Client.instance.modelsStorage.friends = friends;
					EventManager.instance.addEventListener(GetPropertyResponse.GET_FRIENDINFOS_RESPONSE, onGetFriendInfos);
					SessionSocket.instance.sendMessage(new GetFriendInfosRequest(idList));
				}

				function onGetProfilesError(e:VkontakteEvent):void
				{
					vkRequest.removeEventListener(VkontakteEvent.RESPONSE, onGetProfiles);
					vkRequest.removeEventListener(VkontakteEvent.ERROR, onGetProfilesError);
					trace("onGetProfilesError message: " + e.message);
					trace("onGetProfilesError xml: " + e.xml);
					removeLoadingIndicator();
				}

				function onGetFriendInfos(e:ServerResponseEvent):void
				{
					removeLoadingIndicator();
					EventManager.instance.removeEventListener(GetPropertyResponse.GET_FRIENDINFOS_RESPONSE, onGetFriendInfos);
					var reponse:GetPropertyResponse = e.response as GetPropertyResponse;
					Client.instance.modelsStorage.friends.sort = null;
					for each(var friendInfoFromServer:FriendInfo in reponse.propertyAsArray)
					{
						var friendInfoInList:FriendInfo = friendsDict[friendInfoFromServer.vkontakteID];
						friendInfoInList.city = friendInfoFromServer.city;
						friendInfoInList.rating = friendInfoFromServer.rating;
						friendInfoInList.displayName = friendInfoFromServer.displayName;
						friendInfoInList.level = friendInfoFromServer.level;
						friendInfoInList.userID = friendInfoFromServer.userID;
						friendInfoInList.isWashed = friendInfoFromServer.isWashed;
					}

					var sort:Sort = new Sort();
					sort.fields = [new SortField("rating", true, true, true)];
					Client.instance.modelsStorage.friends.sort = sort;
					Client.instance.modelsStorage.friends.refresh();

					var fl:FriendsList = new FriendsList();
					fl.modelsStorage = Client.instance.modelsStorage;
					fl.x = 230;
					fl.y = 10;

					Tracker.instance.trackPageview("/friends/list");
					PopUpManager.addPopUp(fl, Client.instance, true);
					PopUpManager.centerPopUp(fl);
					PopUpManager.bringToFront(fl);

				}
			}
]]></mx:Script>
</mx:Canvas>
