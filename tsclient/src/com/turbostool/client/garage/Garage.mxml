<?xml version="1.0" ?>
<BaseScreen xmlns:mx="http://www.adobe.com/2006/mxml"
            xmlns="com.turbostool.client.screens.*"
            xmlns:controls="com.turbostool.controls.*"
            xmlns:garage="com.turbostool.client.garage.*"
            xmlns:car="com.turbostool.client.screens.car.*"
            width="607" height="390" creationComplete="onCreationComplete()" backgroundAlpha="0"
        >

    <mx:Metadata>
        [Event(name="screenSelected", type="com.turbostool.client.city.ScreenSelectedCommand")]
    </mx:Metadata>
    
    <mx:Style source="styles.css"/>

    <mx:Script><![CDATA[
        import com.turbostool.client.ModelsStorage;
        import com.turbostool.client.Tracker;
        import com.turbostool.client.carShop.ShopCarPopup;
        import com.turbostool.client.city.ScreenSelectedCommand;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.model.CarInfo;
        import com.turbostool.client.model.ItemInfo;
        import com.turbostool.client.model.UserInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.CarRepairRequest;
        import com.turbostool.client.net.messages.RepairResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.net.messages.SetCarRequest;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        private function screenCommand(screenName: String): void {
            dispatchEvent(new ScreenSelectedCommand(screenName));
        }

        private var _carArray:Array;
        private var _carCollection:ArrayCollection;

        [Bindable]
        public function get carArray():Array {
            return _carArray;
        }

        public function set carArray(val:Array):void {
            _carArray = val;
            carCollection = new ArrayCollection(val);
        }

        [Bindable]
        public function get carCollection():ArrayCollection {
            return _carCollection;
        }

        public function set carCollection(val:ArrayCollection):void {
            _carCollection = val;
            userInfo = userInfo;
        }

        private function onCapitalRepairClick(): void
        {
            var repairPopUp: ShopCarPopup = new ShopCarPopup();
            repairPopUp.carInfo = cars.currentCar;
            repairPopUp.sellFun = onCapitalRepairClick2;
            repairPopUp.isSell = false;
            ModalManager.instance.addModalWindow(repairPopUp, "modalClose");
        }

        private function onRepairResponse(event: ServerResponseEvent): void {
            EventManager.instance.removeEventListener(RepairResponse.REPAIR, onRepairResponse);
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            var response: RepairResponse = RepairResponse(event.response);
            if (!response.isOK) {
                Alert.show(response.message);
                Tracker.instance.trackEvent("carRepair", "repairResponse", "error?message=" + response.message);
            } else {
                modelsStorage.userInfo = response.userInfo;
                Alert.show("yourCarIsRepairedAndReady");
                Tracker.instance.trackEvent("carRepair", "repairResponse", "ok");
            }
        }

        private function onCapitalRepairClick2(id:Number): void {
            EventManager.instance.addEventListener(RepairResponse.REPAIR, onRepairResponse);
            SessionSocket.instance.sendMessage(new CarRepairRequest(id));

            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);

            Tracker.instance.trackEvent("carRepair", "repairRequest", "carClassId: " + cars.currentCar.classID);
        }

        private function onRepairClick(): void
        {
            var repairPopUp: RepairPopup = new RepairPopup();
            repairPopUp.modelsStorage = modelsStorage;
            repairPopUp.carInfo = cars.currentCar;
            ModalManager.instance.addModalWindow(repairPopUp, "modalClose");
        }

        private function onRepaintClick(): void
        {
            parentDocument.switchView();
        }

        private function onEquipmentClick(event: Event, itemRenderer: GarageItemRenderer): void
        {
            var itemInfo: ItemInfo = itemRenderer["data"] as ItemInfo;
            if (itemInfo != null)
            {
                var gip: GarageItemPopup = new GarageItemPopup();
                gip.itemInfo = itemInfo;
                gip.modelsStorage = modelsStorage;
                gip.isWear = false;
                ModalManager.instance.addModalWindow(gip, "modalClose");
            }
        }

        private function onInventoryClick(event: ListEvent):void
        {
            var itemInfo: ItemInfo = event.currentTarget.selectedItem;
            if (itemInfo != null && itemInfo.slot != "undefined")
            {
                var gip: GarageItemPopup = new GarageItemPopup();
                gip.itemInfo = itemInfo;
                gip.modelsStorage = modelsStorage;
                gip.isWear = true;
                ModalManager.instance.addModalWindow(gip, "modalClose");
            }
        }

        private var _userInfo: UserInfo;

        private var _carInfo: CarInfo;

        [Bindable]
        public function get carInfo():CarInfo {
            return _carInfo;
        }

        public function set carInfo(val:CarInfo):void {
            //trace("garage set carInfo");
            if (carInfo != null)
                SessionSocket.instance.sendMessage(new SetCarRequest(val.id));
            _carInfo = val;
        }

        private function onCreationComplete(): void
        {
            userInfo = _userInfo;
            modelsStorage = modelsStorage;
        }

        [Bindable]
        override public function get modelsStorage():ModelsStorage
        {
            return _modelsStorage;
        }

        override public function set modelsStorage(val:ModelsStorage):void
        {
            _modelsStorage = val;
        }

        [Bindable]
        public function get userInfo():UserInfo
        {
            return _userInfo;
        }

        public function set userInfo(val:UserInfo):void
        {
            _userInfo = val;
        }

        ]]></mx:Script>

    <mx:Binding source="userInfo.cars" destination="carArray"/>
    <mx:Image x="30" y="69" source="@Embed('/assets/gui/screens/garage/garage_bkg.jpg')" width="547" height="317"/>
    <controls:Rectangle x="29" y="36" height="350" width="548" alpha="1" borderColor2="#dc8d0c" backgroundAlpha="0"
                        cornerRadius="6" backgroundColor2="#ffffff" borderWidth="1"/>
    <ScreenHead x="29" y="36" width="548" text="{str('garage')}"/>
    <garage:Equipment carInfo="{cars.currentCar}" onEquipmentClickFun="onEquipmentClick" y="2"/>
    <car:CarSelection id="cars"
                      bottom="8" left="35"
                      height="250" width="350"
                      flip="true"
                      viewName="false"
                      viewDescription="false"
                      viewCount="false"
                      colorIndex="{cars.currentCar.color}"/>
    <mx:Binding source="carCollection" destination="cars.carList"/>
    <mx:Binding source="userInfo.carID" destination="cars.carID"/>
    <mx:Binding source="cars.currentCar" destination="carInfo"/>
    <car:CarParams x="408" y="76"
                   carInfo="{carInfo}"/>
    <controls:TileListControl itemClick="onInventoryClick(event)" x="391" y="151" width="179" height="231"
                              dataProvider="{userInfo.inventory}"
                              itemRenderer="com.turbostool.client.garage.GarageItemRenderer" backgroundColor="#de8a04"
                              borderColor="#de8a04"/>
    <mx:Label id="carNameLabel"
              text="{carInfo.displayName}"
              fontWeight="bold" color="#FFFFFF" fontSize="25"
              fontFamily="Verdana" styleName="screenCaption"
              horizontalCenter="0" y="74" width="232"/>
    <garage:CarState x="34" y="76" carInfo="{carInfo}"/>
    <mx:Label x="389" y="131" text="{str('inventoryCapacity', [userInfo.inventory.length + '/' + modelsStorage.globalInfo.inventorySize])}"
              color="#FFFFFF" fontSize="14" fontFamily="Arial"/>
    <mx:Button right="222" y="356" label="{str('totalRepair')}"
               click="onCapitalRepairClick()" styleName="redWhite" fontFamily="Arial"
               color="#FFFFFF" height="26" fontStyle="normal" fontSize="11"/>
    <mx:Button right="222" y="330" label="{str('repairItems')}" click="onRepairClick()" styleName="redWhite" fontFamily="Arial"
               color="#FFFFFF" height="26" fontStyle="normal" fontSize="11"/>
    <mx:Button right="222" y="304" label="{str('recolorCar')}" click="onRepaintClick()" styleName="redWhite" fontFamily="Arial"
               color="#FFFFFF" height="26" fontStyle="normal" fontSize="11"/>

</BaseScreen>