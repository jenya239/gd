<?xml version="1.0" ?>
<screens:BaseScreen xmlns:mx="http://www.adobe.com/2006/mxml"
                    xmlns="com.turbostool.client.garage.*"
                    xmlns:screens="com.turbostool.client.screens.*"
                    backgroundColor="#a23636"
                    width="326"
                    creationComplete="onCreationComplete()"
        >

    <mx:Script><![CDATA[
        import com.turbostool.client.Tracker;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.model.ItemInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.DeleteItemRequest;
        import com.turbostool.client.net.messages.DeleteItemResponse;
        import com.turbostool.client.net.messages.RemoveCarUpgradeRequest;
        import com.turbostool.client.net.messages.RemoveCarUpgradeResponse;
        import com.turbostool.client.net.messages.RepairRequest;
        import com.turbostool.client.net.messages.RepairResponse;
        import com.turbostool.client.net.messages.SellItemRequest;
        import com.turbostool.client.net.messages.SellItemResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.net.messages.UseCarUpgradeRequest;
        import com.turbostool.client.net.messages.UseCarUpgradeResponse;
        import com.turbostool.client.utils.Utils;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        private function onSell(): void {
            showLoadingIndicator();
            
            EventManager.instance.addEventListener(SellItemResponse.SELL_ITEM, onSellItemResponse);
            SessionSocket.instance.sendMessage(new SellItemRequest(itemInfo.id));

            Tracker.instance.trackEvent("sellItem", "request", itemInfo.name);
        }

        private function onSellItemResponse(event: ServerResponseEvent):void
        {
            hideLoadingIndicator();
            ModalManager.instance.closeAllWindows();
            
            EventManager.instance.removeEventListener(SellItemResponse.SELL_ITEM, onSellItemResponse);
            var response: SellItemResponse = event.response as SellItemResponse;

            if (response.isOK)
            {
                _modelsStorage.userInfo = response.userInfo;
                Alert.show(str("succesfullSell"));
                Tracker.instance.trackEvent("sellItem", "successful", response.itemClass.name);
            }
            else
            {
                Alert.show(str("sellError") + ": " + response.message);
                Tracker.instance.trackEvent("sellItem", "failure", response.message);
            }
        }        

        private function onDeleteItem(itemInfo: ItemInfo): void
        {
            EventManager.instance.addEventListener(DeleteItemResponse.DELETE_ITEM, onDeleteItemResponse);
            SessionSocket.instance.sendMessage(new DeleteItemRequest(itemInfo.id));

            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);
        }

        private function onDeleteItemResponse(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(DeleteItemResponse.DELETE_ITEM, onDeleteItemResponse);
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            var response: DeleteItemResponse = DeleteItemResponse(event.response);
            if (!response.isOK)
            {
                Alert.show(response.message);
            }
            else
            {
                modelsStorage.userInfo = response.userInfo;
            }
        }

        private function onRepairResponse(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(RepairResponse.REPAIR, onRepairResponse);
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            var response: RepairResponse = RepairResponse(event.response);
            if (!response.isOK)
            {
                Alert.show(response.message);
                Tracker.instance.trackEvent("itemsRepair", "repairResponse", "error?message=" + response.message);
            }
            else
            {
                modelsStorage.userInfo = response.userInfo;
                Tracker.instance.trackEvent("itemsRepair", "repairResponse", "ok");
            }
        }

        private function onRepairItem(itemInfo: ItemInfo): void
        {
            EventManager.instance.addEventListener(RepairResponse.REPAIR, onRepairResponse);
            SessionSocket.instance.sendMessage(new RepairRequest(itemInfo.id));

            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);

            Tracker.instance.trackEvent("itemsRepair", "repairRequest", "one", itemInfo.classID);
        }

        [Bindable]
        public var isWear: Boolean;

        private function onWearRemove(): void
        {
            if (isWear)
            {
                EventManager.instance.addEventListener(UseCarUpgradeResponse.USE_CAR_UPGRADE, onUseCarUpgradeResponse);
                SessionSocket.instance.sendMessage(new UseCarUpgradeRequest(itemInfo.id));

                PopUpManager.addPopUp(loadingIndicator, this, true);
                PopUpManager.centerPopUp(loadingIndicator);
                PopUpManager.bringToFront(loadingIndicator);
            }
            else
            {
                EventManager.instance.addEventListener(RemoveCarUpgradeResponse.REMOVE_CAR_UPGRADE, onRemoveCarUpgradeResponse);
                SessionSocket.instance.sendMessage(new RemoveCarUpgradeRequest(itemInfo.id));

                PopUpManager.addPopUp(loadingIndicator, this, true);
                PopUpManager.centerPopUp(loadingIndicator);
                PopUpManager.bringToFront(loadingIndicator);
            }

            dispatchEvent(new Event("modalClose"));
        }

        private function onUseCarUpgradeResponse(event: ServerResponseEvent):void
        {
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            EventManager.instance.removeEventListener(UseCarUpgradeResponse.USE_CAR_UPGRADE, onUseCarUpgradeResponse);
            var response: UseCarUpgradeResponse = event.response as UseCarUpgradeResponse;
            if (response.isOK) {
                _modelsStorage.userInfo = response.userInfo;
            } else {
                Alert.show(response.message);
            }
        }

        private function onRemoveCarUpgradeResponse(event: ServerResponseEvent):void
        {
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            EventManager.instance.removeEventListener(RemoveCarUpgradeResponse.REMOVE_CAR_UPGRADE, onRemoveCarUpgradeResponse);
            var response: RemoveCarUpgradeResponse = event.response as RemoveCarUpgradeResponse;
            if (response.isOK) {
                _modelsStorage.userInfo = response.userInfo;
            } else {
                Alert.show(response.message);
            }
        }

        private var _itemInfo: ItemInfo;

        private function onCreationComplete(): void
        {
            setDurability();
        }

        [Bindable]
        public function get itemInfo():ItemInfo
        {
            return _itemInfo;
        }

        public function set itemInfo(val:ItemInfo):void
        {
            _itemInfo = val;
            setDurability();

        }

        protected function setDurability(): void
        {
            if (durability != null && _itemInfo != null)
                durability.setProgress(_itemInfo.currentDurability, _itemInfo.durabilityMax);
        }

        ]]></mx:Script>
    <mx:HRule y="23" left="5" right="5" strokeWidth="1"/>
    <mx:Button id="close1" y="3" label="x" styleName="gray"
               click="dispatchEvent(new Event('modalClose'))" right="5" height="19" textAlign="center" width="21"/>

    <mx:VBox right="0" left="0" top="30" paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5">

        <ItemDescriptionControl y="25" left="5" right="5" itemInfo="{itemInfo}" width="100%"/>
        <mx:Canvas width="100%" visible="{!itemInfo.isNitro}"
                   horizontalScrollPolicy="off" verticalScrollPolicy="off">
            <mx:ProgressBar id="durability" height="11" trackHeight="11" left="2" right="53"
                            label=" " minimum="0" maximum="100"
                            mode="manual" trackColors="[#0, #0]" borderColor="#DC8D14" barColor="#eeeeee"
                            indeterminate="false" y="5"/>

            <mx:Label text="{Utils.round(itemInfo.currentDurability)}/{Utils.round(itemInfo.durabilityMax)}"
                      color="#FFFFFF" fontSize="12" left="266"
                      fontFamily="Arial" fontWeight="bold"/>
        </mx:Canvas>

        <mx:Canvas width="100%" height="60">
            <mx:Button x="119" y="33" enabled="{RepairPopup.canRepair(itemInfo, modelsStorage)}" label="{str('repair')}"
                       visible="{!itemInfo.isNitro}"
                       styleName="default" fontSize="12" click="onRepairItem(itemInfo)" fontFamily="Verdana"
                       fontWeight="bold"/>
            <mx:Button x="5" y="7" label="{isWear?str('install'):str('remove')}" textAlign="center" styleName="default"
                       fontSize="12"
                       width="110"
                       click="onWearRemove()" fontFamily="Verdana"/>
            <mx:Button x="5" y="32" label="{str('sell')}" textAlign="center" styleName="redBlack"
                       fontSize="12"
                       width="110"
                       click="onSell()" fontFamily="Verdana"/>

            <!--<mx:Button x="5" y="34" label="{str('delete')}" styleName="default" fontSize="12" width="100"
                       click="onDeleteItem(itemInfo)" textAlign="center" fontFamily="Verdana"/>-->
            <mx:Text id="lblParam5"
                     text=" = {Utils.formatPrice(RepairPopup.calcItemRepairPrice(itemInfo), false, 0)}"
                     visible="{!itemInfo.isNitro}"
                     color="#FFFFFF" fontWeight="bold" fontFamily="Verdana" fontSize="12" x="185" width="127" y="34"/>
        </mx:Canvas>
    </mx:VBox>
    <mx:Text x="4" y="2" htmlText="{str('price')}: {Utils.calcSellPrice(itemInfo, modelsStorage, false)}" color="{itemInfo.realPrice > 0 ? 0xD7A50E : 0x719B2F}"
             fontSize="12" fontFamily="Arial"
             fontStyle="normal" fontWeight="bold"/>

</screens:BaseScreen>