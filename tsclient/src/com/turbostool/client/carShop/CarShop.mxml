<?xml version="1.0" ?>
<BaseScreen xmlns:mx="http://www.adobe.com/2006/mxml"
            xmlns="com.turbostool.client.screens.*"
            xmlns:carShop="com.turbostool.client.carShop.*"
            xmlns:controls="com.turbostool.controls.*"
            xmlns:car="com.turbostool.client.screens.car.*"
            backgroundColor="#151D12"
            horizontalScrollPolicy="off"
            verticalScrollPolicy="off"
            width="607" height="390"
            creationComplete="onInit();">
    
    <mx:Metadata>
        [Event(name="screenSelected", type="com.turbostool.client.city.ScreenSelectedCommand")]
    </mx:Metadata>

    <mx:Style source="styles.css"/>
    <mx:Script><![CDATA[
        import com.turbostool.client.ModelsStorage;
        import com.turbostool.client.Tracker;
        import com.turbostool.client.city.ScreenSelectedCommand;
        import com.turbostool.client.event.EventManager;
        import com.turbostool.client.game.view.ModalManager;
        import com.turbostool.client.model.CarInfo;
        import com.turbostool.client.model.VkontakteInfo;
        import com.turbostool.client.net.SessionSocket;
        import com.turbostool.client.net.messages.BuyCarRequest;
        import com.turbostool.client.net.messages.BuyCarResponse;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesRequest;
        import com.turbostool.client.net.messages.ExchangeVkontakteVotesResponse;
        import com.turbostool.client.net.messages.GetPropertyRequest;
        import com.turbostool.client.net.messages.GetPropertyResponse;
        import com.turbostool.client.net.messages.SellCarRequest;
        import com.turbostool.client.net.messages.SellCarResponse;
        import com.turbostool.client.net.messages.ServerResponseEvent;
        import com.turbostool.client.shop.ShopItemPopup;
        import com.turbostool.client.utils.Utils;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        private function screenCommand(screenName: String): void {
            dispatchEvent(new ScreenSelectedCommand(screenName));
        }

        private var _shopCollection: ArrayCollection;
        private var _shopItems: Array;
        private var _needSlot: Boolean = false;

        private function onInit(): void
        {
            modelsStorage = modelsStorage;
            //trace("CarShop onInit");
        }

        [Bindable]
        override public function get modelsStorage():ModelsStorage
        {
            return _modelsStorage;
        }

        override public function set modelsStorage(val:ModelsStorage):void
        {
            _modelsStorage = val;
        }

        [Bindable]
        public function get shopCars(): Array
        {
            return _shopItems;
        }

        public function set shopCars(value:Array):void
        {
            //trace("CarShop.mxml set shopCars-Array" + value);
            if (value != null)
            {
                _shopItems = value;
                shopCollection = new ArrayCollection(value);
            }
        }

        [Bindable]
        public function get shopCollection():ArrayCollection
        {
            return _shopCollection;
        }

        public function set shopCollection(value:ArrayCollection):void
        {
            //trace("CarShop.mxml set shopCollection");
            _shopCollection = value;
        }

        private var _deltaVotes: Number;
        private var _goldChange: Number;

        private function onBuyCar():void
        {
            var totalRealPrice: Number = cars.currentCar.realPrice;
            if(modelsStorage.userInfo.cars.length >= modelsStorage.userInfo.carSlots) {
                if (modelsStorage.userInfo.carSlots >= modelsStorage.globalInfo.maxCarSlots) {
                    Alert.show(str("garageFullAndCantBuyMore"));
                    return;
                }

                var slotCost: Number = slotCost();
                var slotCostStr: String = Utils.formatPrice(slotCost, true);

                Alert.yesLabel = str("yes");
                Alert.noLabel = str("no");
                Alert.show(str("garageFullBuyMore", [slotCostStr, Utils.calcCarSellPrice(cars.currentCar, modelsStorage, true)]), "", Alert.YES | Alert.NO, null, carSlotBuyAlertHandler);

                function carSlotBuyAlertHandler(e: CloseEvent): void {
                    if(e.detail == Alert.YES) {
                        totalRealPrice += slotCost;
                        _needSlot = true;
                        continueBuyingCar(totalRealPrice);
                    } else
                        _needSlot = false;
                }
            } else {
                continueBuyingCar(totalRealPrice);
            }
        }

				private function slotCost(): Number{
					var nslots: Number = _modelsStorage.userInfo.carSlots;
          var slotCost: Number = _modelsStorage.globalInfo.carSlotCost * (nslots <= 5 ? (nslots - 2) : 3);
					return slotCost;
				}

        private function continueBuyingCar(totalRealPrice: Number): void {
            if(modelsStorage.userInfo.realMoney >= totalRealPrice)
            {
                requestBuyCar();
            }
            else
            {
                if (!Client.instance.isAPIWrapper)
                {
                    Alert.show(str("notEnoughGoldGoToBank"));
                    _needSlot = false;
                }
                else
                {
                    EventManager.instance.addEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
                    SessionSocket.instance.sendMessage(new GetPropertyRequest(GetPropertyRequest.VKONTAKTE_INFO));
                    PopUpManager.addPopUp(loadingIndicator, this, true);
                    PopUpManager.centerPopUp(loadingIndicator);
                    PopUpManager.bringToFront(loadingIndicator);
                }
            }
        }

        private function onVkontakteInfo(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(GetPropertyResponse.GET_VKONTAKTEINFO_RESPONSE, onVkontakteInfo);
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();
            var response: GetPropertyResponse = event.response as GetPropertyResponse;
            if (response.isOK)
            {
                var totalRealPrice: Number = cars.currentCar.realPrice;
                if(_needSlot) {
                    totalRealPrice += slotCost();
                }

                modelsStorage.vkontakteInfo = response.property as VkontakteInfo;
                var deltaGold: Number = Utils.roundToGreater(totalRealPrice - modelsStorage.userInfo.realMoney);
                _deltaVotes = Utils.roundToGreater(deltaGold / modelsStorage.globalInfo.vkontakteExchangeRate);
                _goldChange = _deltaVotes * modelsStorage.globalInfo.vkontakteExchangeRate - deltaGold;
                if (modelsStorage.vkontakteInfo.userAppBalance >= _deltaVotes)
                {
                    sendWithdrawRequest();
                }
                else
                {
                    Client.instance.wrapper.addEventListener("onBalanceChanged", onBalanceChanged);
                    Client.instance.wrapper.external.showPaymentBox(_deltaVotes);
                }
            }
            else
            {
                Alert.show(str("error") + ": " + response.message);
                _needSlot = false;
            }
        }

        private function onBalanceChanged(e: Object):void
        {
            Client.instance.wrapper.removeEventListener("onBalanceChanged", onBalanceChanged);
            sendWithdrawRequest();
        }

        private function sendWithdrawRequest():void
        {
            EventManager.instance.addEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);
            SessionSocket.instance.sendMessage(new ExchangeVkontakteVotesRequest(_deltaVotes));
            PopUpManager.addPopUp(loadingIndicator, this, true);
            PopUpManager.centerPopUp(loadingIndicator);
            PopUpManager.bringToFront(loadingIndicator);
        }

        private function onExchangeResponse(event: ServerResponseEvent): void
        {
            EventManager.instance.removeEventListener(ExchangeVkontakteVotesResponse.EXCHANGE_VKONTAKTE_VOTES, onExchangeResponse);
            PopUpManager.removePopUp(loadingIndicator);
            var response: ExchangeVkontakteVotesResponse = event.response as ExchangeVkontakteVotesResponse;
            ModalManager.instance.closeAllWindows();
            if (response.isOK)
            {
                Tracker.instance.trackEvent("exchangeVotes", "successful", "" + response.votes, response.votes);

                requestBuyCar();
            }
            else
            {
                _needSlot = false;
                Alert.show(str("exchangeError") + ": " + response.message);

                Tracker.instance.trackEvent("exchangeVotes", "failure", response.message);
            }
        }

        private function requestBuyCar(): void
        {
            typicalSendMessage(BuyCarResponse.BUY_CAR, onBuyCarResponse, new BuyCarRequest(cars.currentCar.classID, colors.colorIndex, _needSlot));

            if (cars.currentCar.realPrice > 0)
                Tracker.instance.trackEvent("buyRealCar", "request", cars.currentCar.displayName + ", color: " + colors.colorIndex);
            else
                Tracker.instance.trackEvent("buyVirtualCar", "request", cars.currentCar.displayName + ", color: " + colors.colorIndex);
        }

        private function onBuyCarResponse(event: ServerResponseEvent):void
        {
            EventManager.instance.removeEventListener(BuyCarResponse.BUY_CAR, onBuyCarResponse);
            var response: BuyCarResponse = event.response as BuyCarResponse;
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            if(response.isOK)
            {
                _modelsStorage.userInfo = response.userInfo;
                Alert.show(str("succesfullBuy"));

                if(response.carClass.realPrice > 0)
                    Tracker.instance.trackEvent("buyRealCar", "successful", response.carClass.displayName);
                else
                    Tracker.instance.trackEvent("buyVirtualCar", "successful", response.carClass.displayName);

                Tracker.instance.trackTrans(response.carClass.displayName, "car", response.carClass.price, response.carClass.realPrice);

                if(response.slot) {
                    Tracker.instance.trackEvent("BuyRealSlot", "Level: " + modelsStorage.userInfo.level);
                    Tracker.instance.trackTrans("GarageSlot", "Miscellaneous", 0, modelsStorage.globalInfo.carSlotCost * (modelsStorage.userInfo.carSlots - 1));
                }
            }
            else {
                Alert.show(str("buyError") + ": " + response.message);

                Tracker.instance.trackEvent("buyCar", "failure", response.message);
            }

            _needSlot = false;
        }

        private function onSell(id:Number):void
        {
            typicalSendMessage(SellCarResponse.SELL_CAR, onSellCarResponse, new SellCarRequest(id));

            Tracker.instance.trackEvent("sellCar", "request");
        }

        private function onSellCarResponse(event: ServerResponseEvent):void
        {
            EventManager.instance.removeEventListener(SellCarResponse.SELL_CAR, onSellCarResponse);
            var response: SellCarResponse = event.response as SellCarResponse;
            PopUpManager.removePopUp(loadingIndicator);
            ModalManager.instance.closeAllWindows();

            if (response.isOK)
            {
                _modelsStorage.userInfo = response.userInfo;
                Alert.show(str("succesfullSell"));

                Tracker.instance.trackEvent("sellCar", "successful", response.carClass.displayName);
            }
            else
            {
                Alert.show(str("sellError") + ": " + response.message);

                Tracker.instance.trackEvent("sellCar", "failure", response.message);
            }
        }

        private function onCarClick(event: ListEvent):void
        {
            var carInfo: CarInfo = event.currentTarget.selectedItem;
            if (carInfo != null)
            {
                if (carInfo.sellPrice > -1)
                {
                    var sip: ShopCarPopup = new ShopCarPopup();
                    sip.carInfo = carInfo;
                    sip.sellFun = onSell;
                    ModalManager.instance.addModalWindow(sip, "modalClose");
                }
                else
                {
                    Alert.show(str("youCantSellSingle1stLevelCar"));
                }
            }
        }

        private function checkLevel(carLevel:Number, lev :Number):Boolean
        {
            return carLevel > lev;
        }

        ]]></mx:Script>

    <ScreenHead x="29" y="36" width="548" text="{str('carShop')}"/>
    <controls:Rectangle x="29" y="36" height="350" width="548" alpha="1" borderColor2="#dc8d0c" backgroundAlpha="0"
                        cornerRadius="6" backgroundColor2="#ffffff" borderWidth="1"/>
    <mx:Button label="{str('toCity')}" styleName="default" fontFamily="Arial" fontWeight="bold" fontSize="11"
               height="21" icon="@Embed(source='/assets/gui/common/exitIcon.png')" textAlign="left"
               textIndent="5" click="onBackClick()" right="29" top="11"/>
    <mx:Image width="547" height="317" x="30" y="69" source="@Embed('/assets/gui/screens/carshop/bkg.png')"
              scaleContent="true"/>
    <car:CarList x="32" y="74" cars="{modelsStorage.userInfo.cars}" onClick="{onCarClick}"/>
    <car:ColorChooser id="colors"
                      colorIndex="1"
                      bottom="33" horizontalCenter="0"/>
    <car:CarSelection id="cars"
                      bottom="73" horizontalCenter="0"
                      height="252" width="450"
                      flip="true"
                      viewCount="false"
                      carIndex="1"
                      level="{modelsStorage.userInfo.level}"
                      carList="{shopCollection}"
                      colorIndex="{colors.colorIndex}"/>
    <car:CarParams id="carParams" top="72" right="35"
                   carInfo="{cars.currentCar}"/>
    <mx:Image x="35" bottom="108" source="@Embed('/assets/gui/screens/carshop/prise.png')"/>
    <mx:Label x="37" bottom="110" text="{cars.currentCar.displayPrice}" fontFamily="Arial"
              fontSize="16" color="#00000F" textDecoration="underline" fontWeight="bold"/>
    <mx:HRule left="32" right="32" bottom="38" height="1"/>

    <mx:Button y="356" right="35"
               label="{str('buy')}" click="onBuyCar()"
               visible="{!checkLevel(cars.currentCar.minLevel,modelsStorage.userInfo.level)}"
               styleName="redWhite" fontFamily="Arial"
               color="#FFFFFF" height="26" fontStyle="normal" fontSize="11"/>

    <mx:Binding source="modelsStorage.carShop" destination="shopCars"/>
</BaseScreen>